{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/hasura/ndc-http/ndc-http-schema/schema/ndc-http-schema",
  "$ref": "#/$defs/NDCHttpSchema",
  "$defs": {
    "AggregateFunctionDefinition": {
      "properties": {
        "result_type": {
          "$ref": "#/$defs/Type"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "result_type"
      ]
    },
    "ArgumentInfo": {
      "properties": {
        "description": {
          "type": "string"
        },
        "type": {
          "$ref": "#/$defs/Type"
        },
        "http": {
          "$ref": "#/$defs/RequestParameter",
          "description": "The request parameter information of the HTTP request"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "type"
      ],
      "description": "ArgumentInfo the information of HTTP request argument"
    },
    "AuthSecurities": {
      "items": {
        "$ref": "#/$defs/AuthSecurity"
      },
      "type": "array",
      "description": "AuthSecurities wraps list of security requirements with helpers"
    },
    "AuthSecurity": {
      "additionalProperties": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "type": "object",
      "description": "AuthSecurity wraps the raw security requirement with helpers"
    },
    "ComparisonOperatorDefinition": {
      "type": "object"
    },
    "EncodingObject": {
      "properties": {
        "style": {
          "$ref": "#/$defs/ParameterEncodingStyle",
          "description": "Describes how a specific property value will be serialized depending on its type.\nSee Parameter Object for details on the style property.\nThe behavior follows the same values as query parameters, including default values.\nThis property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data.\nIf a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored"
        },
        "explode": {
          "type": "boolean",
          "description": "When this is true, property values of type array or object generate separate parameters for each value of the array, or key-value-pair of the map.\nFor other types of properties this property has no effect. When style is form, the default value is true. For all other styles, the default value is false.\nThis property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data.\nIf a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored"
        },
        "allowReserved": {
          "type": "boolean",
          "description": "By default, reserved characters :/?#[]@!$\u0026'()*+,;= in form field values within application/x-www-form-urlencoded bodies are percent-encoded when sent.\nAllowReserved allows these characters to be sent as is:"
        },
        "contentType": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "For more complex scenarios, such as nested arrays or JSON in form data, use the contentType keyword to specify the media type for encoding the value of a complex field."
        },
        "headers": {
          "additionalProperties": {
            "$ref": "#/$defs/RequestParameter"
          },
          "type": "object",
          "description": "A map allowing additional information to be provided as headers, for example Content-Disposition.\nContent-Type is described separately and SHALL be ignored in this section.\nThis property SHALL be ignored if the request body media type is not a multipart."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "EncodingObject represents the Encoding Object that contains serialization strategy for application/x-www-form-urlencoded\n\n[Encoding Object]: https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#encoding-object"
    },
    "EnvBool": {
      "anyOf": [
        {
          "required": [
            "value"
          ],
          "title": "value"
        },
        {
          "required": [
            "env"
          ],
          "title": "env"
        }
      ],
      "properties": {
        "value": {
          "type": "boolean"
        },
        "env": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "EnvString": {
      "anyOf": [
        {
          "required": [
            "value"
          ],
          "title": "value"
        },
        {
          "required": [
            "env"
          ],
          "title": "env"
        }
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "env": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "NDCHttpSchema": {
      "properties": {
        "$schema": {
          "type": "string"
        },
        "settings": {
          "$ref": "#/$defs/NDCHttpSettings"
        },
        "functions": {
          "additionalProperties": {
            "$ref": "#/$defs/OperationInfo"
          },
          "type": "object",
          "description": "Functions (i.e. collections which return a single column and row)"
        },
        "object_types": {
          "additionalProperties": {
            "$ref": "#/$defs/ObjectType"
          },
          "type": "object",
          "description": "A list of object types which can be used as the types of arguments, or return\ntypes of procedures. Names should not overlap with scalar type names."
        },
        "procedures": {
          "additionalProperties": {
            "$ref": "#/$defs/OperationInfo"
          },
          "type": "object",
          "description": "Procedures which are available for execution as part of mutations"
        },
        "scalar_types": {
          "$ref": "#/$defs/SchemaResponseScalarTypes",
          "description": "A list of scalar types which will be used as the types of collection columns"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "functions",
        "object_types",
        "procedures",
        "scalar_types"
      ],
      "description": "NDCHttpSchema extends the [NDC SchemaResponse] with OpenAPI HTTP information"
    },
    "NDCHttpSettings": {
      "properties": {
        "servers": {
          "items": {
            "$ref": "#/$defs/ServerConfig"
          },
          "type": "array"
        },
        "headers": {
          "additionalProperties": {
            "$ref": "#/$defs/EnvString"
          },
          "type": "object"
        },
        "securitySchemes": {
          "additionalProperties": {
            "$ref": "#/$defs/SecurityScheme"
          },
          "type": "object"
        },
        "security": {
          "$ref": "#/$defs/AuthSecurities"
        },
        "version": {
          "type": "string"
        },
        "tls": {
          "$ref": "#/$defs/TLSConfig"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "servers"
      ],
      "description": "NDCHttpSettings represent global settings of the HTTP API, including base URL, headers, etc..."
    },
    "OAuthFlow": {
      "properties": {
        "authorizationUrl": {
          "type": "string"
        },
        "tokenUrl": {
          "$ref": "#/$defs/EnvString"
        },
        "refreshUrl": {
          "$ref": "#/$defs/EnvString"
        },
        "scopes": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "clientId": {
          "$ref": "#/$defs/EnvString"
        },
        "clientSecret": {
          "$ref": "#/$defs/EnvString"
        },
        "endpointParams": {
          "additionalProperties": {
            "$ref": "#/$defs/EnvString"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "OAuthFlow contains flow configurations for OAuth 2.0 API specification\n\n[OAuth 2.0]: https://swagger.io/docs/specification/authentication/oauth2"
    },
    "ObjectField": {
      "properties": {
        "arguments": {
          "$ref": "#/$defs/ObjectFieldArguments"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "$ref": "#/$defs/Type"
        },
        "http": {
          "$ref": "#/$defs/TypeSchema",
          "description": "The field schema information of the HTTP request"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "type"
      ],
      "description": "ObjectField defined on this object type"
    },
    "ObjectFieldArguments": {
      "additionalProperties": {
        "$ref": "#/$defs/ArgumentInfo"
      },
      "type": "object"
    },
    "ObjectType": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of this type"
        },
        "fields": {
          "additionalProperties": {
            "$ref": "#/$defs/ObjectField"
          },
          "type": "object",
          "description": "Fields defined on this object type"
        },
        "xml": {
          "$ref": "#/$defs/XMLSchema",
          "description": "XML schema"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "fields"
      ],
      "description": "ObjectType represents the object type of http schema"
    },
    "OperationInfo": {
      "properties": {
        "request": {
          "$ref": "#/$defs/Request"
        },
        "arguments": {
          "additionalProperties": {
            "$ref": "#/$defs/ArgumentInfo"
          },
          "type": "object",
          "description": "Any arguments that this collection requires"
        },
        "description": {
          "type": "string",
          "description": "Column description"
        },
        "result_type": {
          "$ref": "#/$defs/Type",
          "description": "The name of the result type"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "request",
        "arguments",
        "result_type"
      ],
      "description": "OperationInfo extends connector command operation with OpenAPI HTTP information"
    },
    "ParameterEncodingStyle": {
      "type": "string",
      "enum": [
        "simple",
        "label",
        "matrix",
        "form",
        "spaceDelimited",
        "pipeDelimited",
        "deepObject"
      ]
    },
    "ParameterLocation": {
      "type": "string",
      "enum": [
        "query",
        "header",
        "path",
        "cookie",
        "body",
        "formData"
      ]
    },
    "Request": {
      "properties": {
        "url": {
          "type": "string"
        },
        "method": {
          "type": "string",
          "enum": [
            "get",
            "post",
            "put",
            "patch",
            "delete"
          ]
        },
        "headers": {
          "additionalProperties": {
            "$ref": "#/$defs/EnvString"
          },
          "type": "object"
        },
        "security": {
          "$ref": "#/$defs/AuthSecurities"
        },
        "servers": {
          "items": {
            "$ref": "#/$defs/ServerConfig"
          },
          "type": "array"
        },
        "requestBody": {
          "$ref": "#/$defs/RequestBody"
        },
        "response": {
          "$ref": "#/$defs/Response"
        },
        "timeout": {
          "type": "integer"
        },
        "retry": {
          "$ref": "#/$defs/RetryPolicy"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "response"
      ],
      "description": "Request represents the HTTP request information of the webhook"
    },
    "RequestBody": {
      "properties": {
        "contentType": {
          "type": "string"
        },
        "encoding": {
          "additionalProperties": {
            "$ref": "#/$defs/EncodingObject"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "RequestBody defines flexible request body with content types"
    },
    "RequestParameter": {
      "properties": {
        "style": {
          "$ref": "#/$defs/ParameterEncodingStyle",
          "description": "Describes how a specific property value will be serialized depending on its type.\nSee Parameter Object for details on the style property.\nThe behavior follows the same values as query parameters, including default values.\nThis property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data.\nIf a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored"
        },
        "explode": {
          "type": "boolean",
          "description": "When this is true, property values of type array or object generate separate parameters for each value of the array, or key-value-pair of the map.\nFor other types of properties this property has no effect. When style is form, the default value is true. For all other styles, the default value is false.\nThis property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data.\nIf a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored"
        },
        "allowReserved": {
          "type": "boolean",
          "description": "By default, reserved characters :/?#[]@!$\u0026'()*+,;= in form field values within application/x-www-form-urlencoded bodies are percent-encoded when sent.\nAllowReserved allows these characters to be sent as is:"
        },
        "contentType": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "For more complex scenarios, such as nested arrays or JSON in form data, use the contentType keyword to specify the media type for encoding the value of a complex field."
        },
        "headers": {
          "additionalProperties": {
            "$ref": "#/$defs/RequestParameter"
          },
          "type": "object",
          "description": "A map allowing additional information to be provided as headers, for example Content-Disposition.\nContent-Type is described separately and SHALL be ignored in this section.\nThis property SHALL be ignored if the request body media type is not a multipart."
        },
        "name": {
          "type": "string"
        },
        "argumentName": {
          "type": "string"
        },
        "in": {
          "$ref": "#/$defs/ParameterLocation"
        },
        "schema": {
          "$ref": "#/$defs/TypeSchema"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "RequestParameter represents an HTTP request parameter"
    },
    "Response": {
      "properties": {
        "contentType": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "contentType"
      ]
    },
    "RetryPolicy": {
      "properties": {
        "times": {
          "type": "integer",
          "description": "Number of retry times"
        },
        "delay": {
          "type": "integer",
          "description": "Delay retry delay in milliseconds"
        },
        "httpStatus": {
          "items": {
            "type": "integer"
          },
          "type": "array",
          "description": "HTTPStatus retries if the remote service returns one of these http status"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "RetryPolicy represents the retry policy of request"
    },
    "ScalarType": {
      "properties": {
        "aggregate_functions": {
          "$ref": "#/$defs/ScalarTypeAggregateFunctions"
        },
        "comparison_operators": {
          "additionalProperties": {
            "$ref": "#/$defs/ComparisonOperatorDefinition"
          },
          "type": "object"
        },
        "representation": {
          "$ref": "#/$defs/TypeRepresentation"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "aggregate_functions",
        "comparison_operators"
      ]
    },
    "ScalarTypeAggregateFunctions": {
      "additionalProperties": {
        "$ref": "#/$defs/AggregateFunctionDefinition"
      },
      "type": "object"
    },
    "SchemaResponseScalarTypes": {
      "additionalProperties": {
        "$ref": "#/$defs/ScalarType"
      },
      "type": "object"
    },
    "SecurityScheme": {
      "oneOf": [
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "apiKey"
              ]
            },
            "value": {
              "$ref": "#/$defs/EnvString"
            },
            "in": {
              "type": "string",
              "enum": [
                "header",
                "query",
                "cookie"
              ]
            },
            "name": {
              "type": "string"
            }
          },
          "type": "object",
          "required": [
            "type",
            "value",
            "in",
            "name"
          ]
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "basic"
              ]
            },
            "username": {
              "$ref": "#/$defs/EnvString"
            },
            "password": {
              "$ref": "#/$defs/EnvString"
            }
          },
          "type": "object",
          "required": [
            "type",
            "username",
            "password"
          ]
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "http"
              ]
            },
            "value": {
              "$ref": "#/$defs/EnvString"
            },
            "header": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Request contains a header field in the form of Authorization: Basic \u003ccredentials\u003e"
            },
            "scheme": {
              "type": "string"
            }
          },
          "type": "object",
          "required": [
            "type",
            "value",
            "header",
            "scheme"
          ]
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "oauth2"
              ]
            },
            "flows": {
              "oneOf": [
                {
                  "properties": {
                    "password": {
                      "$ref": "#/$defs/OAuthFlow"
                    }
                  },
                  "type": "object",
                  "required": [
                    "password"
                  ]
                },
                {
                  "properties": {
                    "implicit": {
                      "$ref": "#/$defs/OAuthFlow"
                    }
                  },
                  "type": "object",
                  "required": [
                    "implicit"
                  ]
                },
                {
                  "properties": {
                    "clientCredentials": {
                      "$ref": "#/$defs/OAuthFlow"
                    }
                  },
                  "type": "object",
                  "required": [
                    "clientCredentials"
                  ]
                },
                {
                  "properties": {
                    "authorizationCode": {
                      "$ref": "#/$defs/OAuthFlow"
                    }
                  },
                  "type": "object",
                  "required": [
                    "authorizationCode"
                  ]
                }
              ]
            }
          },
          "type": "object",
          "required": [
            "type",
            "flows"
          ]
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "openIdConnect"
              ]
            },
            "openIdConnectUrl": {
              "type": "string"
            }
          },
          "type": "object",
          "required": [
            "type",
            "openIdConnectUrl"
          ]
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "cookie"
              ]
            }
          },
          "type": "object",
          "required": [
            "type"
          ]
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "mutualTLS"
              ]
            },
            "tls": {
              "$ref": "#/$defs/TLSConfig"
            }
          },
          "type": "object",
          "required": [
            "type"
          ]
        }
      ]
    },
    "ServerConfig": {
      "properties": {
        "url": {
          "$ref": "#/$defs/EnvString"
        },
        "id": {
          "type": "string"
        },
        "headers": {
          "additionalProperties": {
            "$ref": "#/$defs/EnvString"
          },
          "type": "object"
        },
        "securitySchemes": {
          "additionalProperties": {
            "$ref": "#/$defs/SecurityScheme"
          },
          "type": "object"
        },
        "security": {
          "$ref": "#/$defs/AuthSecurities"
        },
        "tls": {
          "$ref": "#/$defs/TLSConfig"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "url"
      ],
      "description": "ServerConfig contains server configurations"
    },
    "TLSConfig": {
      "properties": {
        "certFile": {
          "$ref": "#/$defs/EnvString",
          "description": "Path to the TLS cert to use for TLS required connections."
        },
        "certPem": {
          "$ref": "#/$defs/EnvString",
          "description": "Alternative to cert_file. Provide the certificate contents as a string instead of a filepath."
        },
        "keyFile": {
          "$ref": "#/$defs/EnvString",
          "description": "Path to the TLS key to use for TLS required connections."
        },
        "keyPem": {
          "$ref": "#/$defs/EnvString",
          "description": "Alternative to key_file. Provide the key contents as a string instead of a filepath."
        },
        "caFile": {
          "$ref": "#/$defs/EnvString",
          "description": "Path to the CA cert. For a client this verifies the server certificate. For a server this verifies client certificates.\nIf empty uses system root CA."
        },
        "caPem": {
          "$ref": "#/$defs/EnvString",
          "description": "Alternative to ca_file. Provide the CA cert contents as a string instead of a filepath."
        },
        "insecureSkipVerify": {
          "$ref": "#/$defs/EnvBool",
          "description": "Additionally you can configure TLS to be enabled but skip verifying the server's certificate chain."
        },
        "includeSystemCACertsPool": {
          "$ref": "#/$defs/EnvBool",
          "description": "Whether to load the system certificate authorities pool alongside the certificate authority."
        },
        "minVersion": {
          "type": "string",
          "description": "Minimum acceptable TLS version."
        },
        "maxVersion": {
          "type": "string",
          "description": "Maximum acceptable TLS version."
        },
        "cipherSuites": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Explicit cipher suites can be set. If left blank, a safe default list is used.\nSee https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites."
        },
        "serverName": {
          "$ref": "#/$defs/EnvString",
          "description": "ServerName requested by client for virtual hosting.\nThis sets the ServerName in the TLSConfig. Please refer to\nhttps://godoc.org/crypto/tls#Config for more information. (optional)"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "TLSConfig represents the transport layer security (LTS) configuration for the mutualTLS authentication"
    },
    "Type": {
      "type": "object"
    },
    "TypeRepresentation": {
      "type": "object"
    },
    "TypeSchema": {
      "properties": {
        "type": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "format": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        },
        "maximum": {
          "type": "number"
        },
        "minimum": {
          "type": "number"
        },
        "maxLength": {
          "type": "integer"
        },
        "minLength": {
          "type": "integer"
        },
        "items": {
          "$ref": "#/$defs/TypeSchema"
        },
        "xml": {
          "$ref": "#/$defs/XMLSchema"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "type"
      ],
      "description": "TypeSchema represents a serializable object of OpenAPI schema that is used for validation"
    },
    "XMLSchema": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Replaces the name of the element/attribute used for the described schema property.\nWhen defined within items, it will affect the name of the individual XML elements within the list.\nWhen defined alongside type being array (outside the items), it will affect the wrapping element and only if wrapped is true.\nIf wrapped is false, it will be ignored."
        },
        "prefix": {
          "type": "string",
          "description": "The prefix to be used for the name."
        },
        "namespace": {
          "type": "string",
          "description": "The URI of the namespace definition. This MUST be in the form of an absolute URI."
        },
        "wrapped": {
          "type": "boolean",
          "description": "Used only for an array definition. Signifies whether the array is wrapped (for example, \u003cbooks\u003e\u003cbook/\u003e\u003cbook/\u003e\u003c/books\u003e) or unwrapped (\u003cbook/\u003e\u003cbook/\u003e)."
        },
        "attribute": {
          "type": "boolean",
          "description": "Declares whether the property definition translates to an attribute instead of an element."
        },
        "text": {
          "type": "boolean",
          "description": "Represents a text value of the xml element."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "XMLSchema represents a XML schema that adds additional metadata to describe the XML representation of this property."
    }
  }
}