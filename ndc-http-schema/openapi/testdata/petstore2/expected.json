{
  "$schema": "https://raw.githubusercontent.com/hasura/ndc-http/refs/heads/main/ndc-http-schema/jsonschema/ndc-http-schema.schema.json",
  "settings": {
    "servers": [
      {
        "url": {
          "value": "https://petstore.swagger.io/v2",
          "env": "SERVER_URL"
        }
      }
    ],
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api_key",
        "value": {
          "env": "API_KEY"
        }
      },
      "basic": {
        "type": "basic",
        "header": "",
        "username": {
          "env": "BASIC_USERNAME"
        },
        "password": {
          "env": "BASIC_PASSWORD"
        }
      },
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
            "tokenUrl": {
              "env": "PETSTORE_AUTH_TOKEN_URL"
            },
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account"
            }
          }
        }
      }
    },
    "version": "1.0.6"
  },
  "functions": {
    "GET_browsers_stats": {
      "request": {
        "url": "/browsers/stats",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "aggregated_by": {
          "description": "How to group the statistics. Must be either \"day\", \"week\", or \"month\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETBrowsersStatsAggregatedByEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "aggregated_by",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "browsers": {
          "description": "The browsers to get statistics for. You can include up to 10 different browsers by including this parameter multiple times.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "browsers",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_date": {
          "description": "The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "The number of results to return.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The point in the list to begin retrieving results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "**This endpoint allows you to retrieve your email statistics segmented by browser type.**  **We only store up to 7 days of email activity in our database.** By default, 500 items will be returned per request via the Advanced Stats API endpoints.  Advanced Stats provide a more in-depth view of your email statistics and the actions taken by your recipients. You can segment these statistics by geographic location, device type, client type, browser, and mailbox provider. For more information about statistics, please see our [Statistics Overview](https://sendgrid.com/docs/ui/analytics-and-reporting/stats-overview/).",
      "result_type": {
        "element_type": {
          "name": "GETBrowsersStatsResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_contactdb_lists_list_id_recipients": {
      "request": {
        "url": "/contactdb/lists/{list_id}/recipients",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "list_id": {
          "description": "The id of the list of recipients you want to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "list_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "GET /contactdb/lists/{list_id}/recipients",
      "result_type": {
        "name": "GETContactdbListsListIdRecipientsResultObject",
        "type": "named"
      }
    },
    "GET_geo_stats": {
      "request": {
        "url": "/geo/stats",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "GET /geo/stats",
      "result_type": {
        "element_type": {
          "name": "GETGeoStatsResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_whitelabel_domains_subuser": {
      "request": {
        "url": "/whitelabel/domains/subuser",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "Username for the subuser to find associated authenticated domain.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "GET /whitelabel/domains/subuser",
      "result_type": {
        "name": "DomainAuthenticationDomainSpf",
        "type": "named"
      }
    },
    "findPetsByStatus": {
      "request": {
        "url": "/pet/findByStatus",
        "method": "get",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "status": {
          "description": "Status values that need to be considered for filter",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "name": "status",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ]
            }
          }
        }
      },
      "description": "Finds Pets by status",
      "result_type": {
        "element_type": {
          "name": "Pet",
          "type": "named"
        },
        "type": "array"
      }
    },
    "findPetsByTags": {
      "request": {
        "url": "/pet/findByTags",
        "method": "get",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "tags": {
          "description": "Tags to filter by",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ]
            }
          }
        }
      },
      "description": "Finds Pets by tags",
      "result_type": {
        "element_type": {
          "name": "Pet",
          "type": "named"
        },
        "type": "array"
      }
    },
    "getInventory": {
      "request": {
        "url": "/store/inventory",
        "method": "get",
        "security": [
          {
            "api_key": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Returns pet inventories by status",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "getOrderById": {
      "request": {
        "url": "/store/order/{orderId}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "orderId": {
          "description": "ID of pet that needs to be fetched",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 10,
              "minimum": 1
            }
          }
        }
      },
      "description": "Find purchase order by ID",
      "result_type": {
        "name": "Order",
        "type": "named"
      }
    },
    "getPetById": {
      "request": {
        "url": "/pet/{petId}",
        "method": "get",
        "security": [
          {
            "api_key": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "petId": {
          "description": "ID of pet to return",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "petId",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Find pet by ID",
      "result_type": {
        "name": "Pet",
        "type": "named"
      }
    },
    "getSnake": {
      "request": {
        "url": "/snake",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get snake",
      "result_type": {
        "name": "SnakeObject",
        "type": "named"
      }
    },
    "getUserByName": {
      "request": {
        "url": "/user/{username}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "The name that needs to be fetched. Use user1 for testing.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get user by user name",
      "result_type": {
        "name": "User",
        "type": "named"
      }
    },
    "get_subject": {
      "request": {
        "url": "/id/{identifier}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "identifier": {
          "description": "The identifier path of the `subject` you're looking for",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "identifier",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Explore details about a given subject node",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "listOAuth2Clients": {
      "request": {
        "url": "/clients",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "client_name": {
          "description": "The name of the clients to filter by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "client_name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "The maximum amount of clients to returned, upper bound is 500 clients.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The offset from where to start looking.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The owner of the clients to filter by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "owner",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "The date that the IP address was entered into warmup.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "name": "start_date",
            "in": "query",
            "schema": {}
          }
        }
      },
      "description": "List OAuth 2.0 Clients",
      "result_type": {
        "element_type": {
          "name": "OAuth2Client",
          "type": "named"
        },
        "type": "array"
      }
    },
    "loginUser": {
      "request": {
        "url": "/user/login",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "password": {
          "description": "The password for login in clear text",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "password",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The user name for login",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Logs user into the system",
      "result_type": {
        "name": "String",
        "type": "named"
      }
    }
  },
  "object_types": {
    "AdvancedStatsClicks": {
      "description": "The individual events and their stats.",
      "fields": {
        "clicks": {
          "description": "The number of links that were clicked in your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_clicks": {
          "description": "The number of unique recipients who clicked links in your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "advanced_stats_clicks"
    },
    "AdvancedStatsClicksOpens": {
      "description": "The individual events and their stats.",
      "fields": {
        "clicks": {
          "description": "The number of links that were clicked in your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "opens": {
          "description": "The total number of times your emails were opened by recipients.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_clicks": {
          "description": "The number of unique recipients who clicked links in your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_opens": {
          "description": "The number of unique recipients who opened your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ApiResponse": {
      "fields": {
        "code": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int32"
          }
        },
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Category": {
      "fields": {
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "CategoryInput": {
      "fields": {
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "Category",
      "xml": {
        "name": "Category"
      }
    },
    "ContactdbCustomFieldWithIdValue": {
      "fields": {
        "id": {
          "description": "The ID of the custom field.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "name": {
          "description": "The name of the field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of the field.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ContactdbCustomFieldTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The value of this recipient's custom field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ContactdbRecipient": {
      "fields": {
        "recipients": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ContactdbRecipientRecipientsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "contactdb_recipient"
    },
    "ContactdbRecipientRecipientsObject": {
      "fields": {
        "custom_fields": {
          "description": "The custom fields assigned to this recipient and their values.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ContactdbCustomFieldWithIdValue",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "first_name": {
          "description": "The first name of this recipient. This is a default custom field that SendGrid provides.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DomainAuthenticationDomainSpf": {
      "fields": {
        "automatic_security": {
          "description": "Indicates if this authenticated domain uses automated security.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "custom_spf": {
          "description": "Indicates if this authenticated domain uses custom SPF.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "default": {
          "description": "Indicates if this is the default domain.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dns": {
          "description": "The DNS records for this authenticated domain.",
          "type": {
            "name": "DomainAuthenticationDomainSpfDnsObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "domain": {
          "description": "The domain authenticated.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the authenticated domain.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ips": {
          "description": "The IP addresses that are included in the SPF record for this authenticated domain.",
          "type": {
            "element_type": {
              "name": "JSON",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        },
        "legacy": {
          "description": "Indicates if this authenticated domain was created using the legacy whitelabel tool. If it is a legacy whitelabel, it will still function, but you'll need to create a new authenticated domain if you need to update it.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "subdomain": {
          "description": "The subdomain that was used to create this authenticated domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_id": {
          "description": "The user_id of the account that this authenticated domain is associated with.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "username": {
          "description": "The username of the account that this authenticated domain is associated with.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if this is a valid authenticated domain .",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "domain_authentication:domain_spf"
    },
    "DomainAuthenticationDomainSpfDnsDkimObject": {
      "description": "The DKIM record for messages sent using this authenticated domain.",
      "fields": {
        "data": {
          "description": "The DKIM record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "host": {
          "description": "The DNS labels for the DKIM signature.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of data in the DKIM record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if the DKIM record is valid.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "DomainAuthenticationDomainSpfDnsDomainSpfObject": {
      "description": "The SPF record for the root domain.",
      "fields": {
        "data": {
          "description": "The SPF record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "host": {
          "description": "The root domain that this SPF record will be used to authenticate.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of data in the SPF record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if the SPF record is valid.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "DomainAuthenticationDomainSpfDnsMailServerObject": {
      "description": "Designates which mail server is responsible for accepting messages from a domain.",
      "fields": {
        "data": {
          "description": "The mail server responsible for accepting messages from the sending domain.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "host": {
          "description": "The domain sending the messages.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "They type of DNS record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if this is a valid DNS record.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "DomainAuthenticationDomainSpfDnsObject": {
      "description": "The DNS records for this authenticated domain.",
      "fields": {
        "dkim": {
          "description": "The DKIM record for messages sent using this authenticated domain.",
          "type": {
            "name": "DomainAuthenticationDomainSpfDnsDkimObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "domain_spf": {
          "description": "The SPF record for the root domain.",
          "type": {
            "name": "DomainAuthenticationDomainSpfDnsDomainSpfObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "mail_server": {
          "description": "Designates which mail server is responsible for accepting messages from a domain.",
          "type": {
            "name": "DomainAuthenticationDomainSpfDnsMailServerObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "subdomain_spf": {
          "description": "The SPF record for the subdomain used to create this authenticated domain.",
          "type": {
            "name": "DomainAuthenticationDomainSpfDnsSubdomainSpfObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "DomainAuthenticationDomainSpfDnsSubdomainSpfObject": {
      "description": "The SPF record for the subdomain used to create this authenticated domain.",
      "fields": {
        "data": {
          "description": "The SPF record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "host": {
          "description": "The domain that this SPF record will be used to authenticate.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of data in the SPF record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if this is a valid SPF record.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "GETBrowsersStatsResultObject": {
      "fields": {
        "date": {
          "description": "The date that the statistics were gathered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stats": {
          "description": "The list of statistics.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETBrowsersStatsResultStatsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETBrowsersStatsResultStatsObject": {
      "fields": {
        "metrics": {
          "description": "The individual events and their stats.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AdvancedStatsClicks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the specific segmentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of segmentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETContactdbListsListIdRecipientsResultObject": {
      "fields": {
        "recipients": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ContactdbRecipient",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETGeoStatsResultObject": {
      "fields": {
        "date": {
          "description": "The date that the statistics were gathered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stats": {
          "description": "The list of statistics.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETGeoStatsResultStatsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETGeoStatsResultStatsObject": {
      "fields": {
        "metrics": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AdvancedStatsClicksOpens",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the specific segmentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of segmentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OAuth2Client": {
      "fields": {
        "client_id": {
          "description": "ID  is the id for this client.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "client_name": {
          "description": "Name is the human-readable string name of the client to be presented to the end-user during authorization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "client_secret": {
          "description": "Secret is the client's secret. The secret will be included in the create request as cleartext, and then never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users that they need to write the secret down as it will not be made available again.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "client_secret_expires_at": {
          "description": "SecretExpiresAt is an integer holding the time at which the client secret will expire or 0 if it will not expire. The time is represented as the number of seconds from 1970-01-01T00:00:00Z as measured in UTC until the date/time of expiration.  This feature is currently not supported and it's value will always be set to 0.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "client_uri": {
          "description": "ClientURI is an URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "oAuth2Client"
    },
    "OAuth2ClientInput": {
      "fields": {
        "client_id": {
          "description": "ID  is the id for this client.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "client_name": {
          "description": "Name is the human-readable string name of the client to be presented to the end-user during authorization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "client_secret": {
          "description": "Secret is the client's secret. The secret will be included in the create request as cleartext, and then never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users that they need to write the secret down as it will not be made available again.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "client_secret_expires_at": {
          "description": "SecretExpiresAt is an integer holding the time at which the client secret will expire or 0 if it will not expire. The time is represented as the number of seconds from 1970-01-01T00:00:00Z as measured in UTC until the date/time of expiration.  This feature is currently not supported and it's value will always be set to 0.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "client_uri": {
          "description": "ClientURI is an URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "oAuth2Client"
    },
    "Order": {
      "fields": {
        "complete": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "petId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "quantity": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int32"
          }
        },
        "shipDate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "status": {
          "description": "Order Status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrderStatusEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "OrderInput": {
      "fields": {
        "complete": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "petId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "quantity": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int32"
          }
        },
        "shipDate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "status": {
          "description": "Order Status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrderStatusEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "Order",
      "xml": {
        "name": "Order"
      }
    },
    "Pet": {
      "fields": {
        "category": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Category",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "Category"
            }
          }
        },
        "field": {
          "description": "This empty field is returned instead of the list of scopes if the user making the call doesn't have the authorization required.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {}
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "photoUrls": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "xml": {
                "name": "photoUrl"
              }
            },
            "xml": {
              "wrapped": true
            }
          }
        },
        "status": {
          "description": "pet status in the store",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PetStatusEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tags": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Tag",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ],
              "xml": {
                "name": "Tag"
              }
            },
            "xml": {
              "wrapped": true
            }
          }
        }
      },
      "xml": {
        "name": "Pet"
      }
    },
    "PetInput": {
      "fields": {
        "category": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CategoryInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "Category"
            }
          }
        },
        "field": {
          "description": "This empty field is returned instead of the list of scopes if the user making the call doesn't have the authorization required.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {}
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "photoUrls": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "xml": {
                "name": "photoUrl"
              }
            },
            "xml": {
              "wrapped": true
            }
          }
        },
        "status": {
          "description": "pet status in the store",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PetStatusEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tags": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TagInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ],
              "xml": {
                "name": "Tag"
              }
            },
            "xml": {
              "wrapped": true
            }
          }
        }
      },
      "alias": "Pet",
      "xml": {
        "name": "Pet"
      }
    },
    "SnakeObject": {
      "fields": {
        "context": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {}
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "username": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "snake_object",
      "xml": {
        "name": "User"
      }
    },
    "Tag": {
      "fields": {
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "TagInput": {
      "fields": {
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "Tag",
      "xml": {
        "name": "Tag"
      }
    },
    "UpdatePetWithFormBody": {
      "fields": {
        "name": {
          "description": "Updated name of the pet",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Updated status of the pet",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UploadFileBody": {
      "fields": {
        "additionalMetadata": {
          "description": "Additional data to pass to server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "file": {
          "description": "file to upload",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Binary",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "file"
            ]
          }
        }
      }
    },
    "User": {
      "fields": {
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "firstName": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "lastName": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "password": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "phone": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "userStatus": {
          "description": "User Status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int32"
          }
        },
        "username": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "UserInput": {
      "fields": {
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "firstName": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "lastName": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "password": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "phone": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "userStatus": {
          "description": "User Status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int32"
          }
        },
        "username": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "User",
      "xml": {
        "name": "User"
      }
    }
  },
  "procedures": {
    "addPet": {
      "request": {
        "url": "/pet",
        "method": "post",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Pet object that needs to be added to the store",
          "type": {
            "name": "PetInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ],
              "xml": {
                "name": "Pet"
              }
            }
          }
        }
      },
      "description": "Add a new pet to the store",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "addSnake": {
      "request": {
        "url": "/snake",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Create snake",
      "result_type": {
        "name": "SnakeObject",
        "type": "named"
      }
    },
    "deleteOrder": {
      "request": {
        "url": "/store/order/{orderId}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "orderId": {
          "description": "ID of the order that needs to be deleted",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "minimum": 1
            }
          }
        }
      },
      "description": "Delete purchase order by ID",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "deletePet": {
      "request": {
        "url": "/pet/{petId}",
        "method": "delete",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "api_key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "api_key",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "petId": {
          "description": "Pet id to delete",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "petId",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Deletes a pet",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "deleteUser": {
      "request": {
        "url": "/user/{username}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "The name that needs to be deleted",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete user",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "dynamicClientRegistrationCreateOAuth2Client": {
      "request": {
        "url": "/oauth2/register",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /oauth2/register",
          "type": {
            "name": "OAuth2ClientInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "POST /oauth2/register",
      "result_type": {
        "name": "OAuth2Client",
        "type": "named"
      }
    },
    "placeOrder": {
      "request": {
        "url": "/store/order",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "order placed for purchasing the pet",
          "type": {
            "name": "OrderInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ],
              "xml": {
                "name": "Order"
              }
            }
          }
        }
      },
      "description": "Place an order for a pet",
      "result_type": {
        "name": "Order",
        "type": "named"
      }
    },
    "putPetXml": {
      "request": {
        "url": "/pet/xml",
        "method": "put",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/xml"
        },
        "response": {
          "contentType": "application/xml"
        }
      },
      "arguments": {
        "body": {
          "description": "Pet object that needs to be added to the store",
          "type": {
            "name": "PetInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ],
              "xml": {
                "name": "Pet"
              }
            }
          }
        }
      },
      "description": "PUT /pet/xml",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "updatePet": {
      "request": {
        "url": "/pet",
        "method": "put",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Pet object that needs to be added to the store",
          "type": {
            "name": "PetInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ],
              "xml": {
                "name": "Pet"
              }
            }
          }
        }
      },
      "description": "Update an existing pet",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "updatePetWithForm": {
      "request": {
        "url": "/pet/{petId}",
        "method": "post",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/x-www-form-urlencoded"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Form data of /pet/{petId}",
          "type": {
            "name": "UpdatePetWithFormBody",
            "type": "named"
          },
          "http": {
            "in": "formData",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "petId": {
          "description": "ID of pet that needs to be updated",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "petId",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Updates a pet in the store with form data",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "updateUser": {
      "request": {
        "url": "/user/{username}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Updated user object",
          "type": {
            "name": "UserInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ],
              "xml": {
                "name": "User"
              }
            }
          }
        },
        "username": {
          "description": "name that need to be updated",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Updated user",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "uploadFile": {
      "request": {
        "url": "/pet/{petId}/uploadImage",
        "method": "post",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "contentType": "multipart/form-data"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Form data of /pet/{petId}/uploadImage",
          "type": {
            "name": "UploadFileBody",
            "type": "named"
          },
          "http": {
            "in": "formData",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "petId": {
          "description": "ID of pet to update",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "petId",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "uploads an image",
      "result_type": {
        "name": "ApiResponse",
        "type": "named"
      }
    }
  },
  "scalar_types": {
    "Binary": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "bytes"
      }
    },
    "Boolean": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "boolean"
      }
    },
    "ContactdbCustomFieldTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "date",
          "text",
          "number"
        ],
        "type": "enum"
      }
    },
    "Float64": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "float64"
      }
    },
    "GETBrowsersStatsAggregatedByEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "day",
          "week",
          "month"
        ],
        "type": "enum"
      }
    },
    "Int32": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "int32"
      }
    },
    "Int64": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "int64"
      }
    },
    "JSON": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "OrderStatusEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "placed",
          "approved",
          "delivered"
        ],
        "type": "enum"
      }
    },
    "PetStatusEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "available",
          "pending",
          "sold"
        ],
        "type": "enum"
      }
    },
    "String": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "TimestampTZ": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "timestamptz"
      }
    }
  }
}
