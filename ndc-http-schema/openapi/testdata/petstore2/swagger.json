{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
    "version": "1.0.6",
    "title": "Swagger Petstore",
    "termsOfService": "http://swagger.io/terms/",
    "contact": { "email": "apiteam@swagger.io" },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "petstore.swagger.io",
  "basePath": "/v2",
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    { "name": "store", "description": "Access to Petstore orders" },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": ["pet"],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "additionalMetadata",
            "in": "formData",
            "description": "Additional data to pass to server",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "file to upload",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet": {
      "post": {
        "tags": ["pet"],
        "summary": "Add a new pet to the store",
        "description": "",
        "operationId": "addPet",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": { "$ref": "#/definitions/Pet" }
          }
        ],
        "responses": { "405": { "description": "Invalid input" } },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      },
      "put": {
        "tags": ["pet"],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": { "$ref": "#/definitions/Pet" }
          }
        ],
        "responses": {
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Pet not found" },
          "405": { "description": "Validation exception" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },

    "/pet/xml": {
      "put": {
        "operationId": "updatePet",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": { "$ref": "#/definitions/Pet" }
          }
        ],
        "responses": {
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Pet not found" },
          "405": { "description": "Validation exception" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["available", "pending", "sold"],
              "default": "available"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "additionalProperties": true,
              "items": { "$ref": "#/definitions/Pet" }
            }
          },
          "400": { "description": "Invalid status value" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by tags",
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Pet" }
            }
          },
          "400": { "description": "Invalid tag value" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "deprecated": true
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": ["pet"],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/Pet" }
          },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Pet not found" }
        },
        "security": [{ "api_key": [] }]
      },
      "post": {
        "tags": ["pet"],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the pet",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the pet",
            "required": false,
            "type": "string"
          }
        ],
        "responses": { "405": { "description": "Invalid input" } },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      },
      "delete": {
        "tags": ["pet"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Pet not found" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/store/order": {
      "post": {
        "tags": ["store"],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "order placed for purchasing the pet",
            "required": true,
            "schema": { "$ref": "#/definitions/Order" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/Order" }
          },
          "400": { "description": "Invalid Order" }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": ["store"],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/Order" }
          },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Order not found" }
        }
      },
      "delete": {
        "tags": ["store"],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Order not found" }
        }
      }
    },
    "/store/inventory": {
      "get": {
        "tags": ["store"],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": { "type": "integer", "format": "int32" }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/User" }
            }
          }
        ],
        "responses": { "default": { "description": "successful operation" } }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/User" }
            }
          }
        ],
        "responses": { "default": { "description": "successful operation" } }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/User" }
          },
          "400": { "description": "Invalid username supplied" },
          "404": { "description": "User not found" }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": { "$ref": "#/definitions/User" }
          }
        ],
        "responses": {
          "400": { "description": "Invalid user supplied" },
          "404": { "description": "User not found" }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": { "description": "Invalid username supplied" },
          "404": { "description": "User not found" }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              },
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              }
            },
            "schema": { "type": "string" }
          },
          "400": { "description": "Invalid username/password supplied" }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["user"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": ["application/json", "application/xml"],
        "parameters": [],
        "responses": { "default": { "description": "successful operation" } }
      }
    },
    "/user/logout-redirect": {
      "get": {
        "operationId": "logoutUserRedirect",
        "produces": [],
        "parameters": [],
        "responses": { "302": { "description": "successful operation" } }
      }
    },
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": { "$ref": "#/definitions/User" }
          }
        ],
        "responses": { "default": { "description": "successful operation" } }
      }
    },
    "/snake": {
      "get": {
        "tags": ["snake"],
        "summary": "Get snake",
        "description": "",
        "operationId": "getSnake",
        "produces": ["application/json", "application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/snake_object" }
          }
        }
      },
      "post": {
        "tags": ["snake"],
        "summary": "Create snake",
        "operationId": "addSnake",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/snake_object" }
          }
        }
      }
    },
    "/clients": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "summary": "List OAuth 2.0 Clients",
        "operationId": "listOAuth2Clients",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The maximum amount of clients to returned, upper bound is 500 clients.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The offset from where to start looking.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The name of the clients to filter by.",
            "name": "client_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The owner of the clients to filter by.",
            "name": "owner",
            "in": "query"
          },
          {
            "type": "null",
            "description": "The date that the IP address was entered into warmup.",
            "name": "start_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/oAuth2ClientList"
          },
          "default": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/oauth2/register": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "operationId": "dynamicClientRegistrationCreateOAuth2Client",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/oAuth2Client"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "oAuth2Client",
            "schema": {
              "$ref": "#/definitions/oAuth2Client"
            }
          },
          "default": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/contactdb/lists/{list_id}/recipients": {
      "parameters": [
        {
          "name": "list_id",
          "in": "path",
          "description": "The id of the list of recipients you want to retrieve.",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "operationId": "GET_contactdb-lists-list_id-recipients",
        "parameters": [
          {
            "$ref": "#/parameters/trait:onBehalfOfSubuser:on-behalf-of"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "recipients": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/contactdb_recipient"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/browsers/stats": {
      "get": {
        "operationId": "GET_browsers-stats",
        "description": "**This endpoint allows you to retrieve your email statistics segmented by browser type.**\n\n**We only store up to 7 days of email activity in our database.** By default, 500 items will be returned per request via the Advanced Stats API endpoints.\n\nAdvanced Stats provide a more in-depth view of your email statistics and the actions taken by your recipients. You can segment these statistics by geographic location, device type, client type, browser, and mailbox provider. For more information about statistics, please see our [Statistics Overview](https://sendgrid.com/docs/ui/analytics-and-reporting/stats-overview/).",
        "parameters": [
          {
            "name": "browsers",
            "in": "query",
            "description": "The browsers to get statistics for. You can include up to 10 different browsers by including this parameter multiple times.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:onBehalfOfSubuser:on-behalf-of"
          },
          {
            "$ref": "#/parameters/trait:statsAdvancedQueryStringsLimitOffset:limit"
          },
          {
            "$ref": "#/parameters/trait:statsAdvancedQueryStringsLimitOffset:offset"
          },
          {
            "$ref": "#/parameters/trait:statsAdvancedQueryStringsLimitOffset:aggregated_by"
          },
          {
            "$ref": "#/parameters/trait:statsAdvancedQueryStringsLimitOffset:start_date"
          },
          {
            "$ref": "#/parameters/trait:statsAdvancedQueryStringsLimitOffset:end_date"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date that the statistics were gathered."
                  },
                  "stats": {
                    "type": "array",
                    "description": "The list of statistics.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of segmentation."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the specific segmentation."
                        },
                        "metrics": {
                          "$ref": "#/definitions/advanced_stats_clicks"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/geo/stats": {
      "get": {
        "operationId": "GET_geo-stats",
        "parameters": [
          {
            "$ref": "#/parameters/trait:onBehalfOfSubuser:on-behalf-of"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date that the statistics were gathered."
                  },
                  "stats": {
                    "type": "array",
                    "description": "The list of statistics.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of segmentation."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the specific segmentation."
                        },
                        "metrics": {
                          "$ref": "#/definitions/advanced_stats_clicks_opens"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/whitelabel/domains/subuser": {
      "get": {
        "operationId": "GET_whitelabel-domains-subuser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Username for the subuser to find associated authenticated domain.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/domain_authentication:domain_spf"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/id/{identifier}": {
      "get": {
        "operationId": "get subject",
        "parameters": [
          {
            "description": "The identifier path of the `subject` you're looking for\n",
            "in": "path",
            "name": "identifier",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["text/html", "application/ld+json", "application/json"],
        "responses": {
          "200": {
            "description": "`subject` found\n"
          },
          "404": {
            "description": "`subject` not found\n"
          }
        },
        "summary": "Explore details about a given subject node"
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    },
    "api_key": { "type": "apiKey", "name": "api_key", "in": "header" },
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
      "flow": "implicit",
      "scopes": {
        "read:pets": "read your pets",
        "write:pets": "modify pets in your account"
      }
    }
  },
  "responses": {
    "oAuth2ClientList": {
      "description": "A list of clients.",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/oAuth2Client"
        }
      }
    }
  },
  "parameters": {
    "trait:onBehalfOfSubuser:on-behalf-of": {
      "name": "on-behalf-of",
      "in": "header",
      "type": "string",
      "default": "The subuser's username. This header generates the API call as if the subuser account was making the call."
    },
    "trait:statsAdvancedQueryStringsLimitOffset:limit": {
      "name": "limit",
      "in": "query",
      "description": "The number of results to return.",
      "required": false,
      "type": "integer"
    },
    "trait:statsAdvancedQueryStringsLimitOffset:offset": {
      "name": "offset",
      "in": "query",
      "description": "The point in the list to begin retrieving results.",
      "required": false,
      "type": "integer"
    },
    "trait:statsAdvancedQueryStringsLimitOffset:aggregated_by": {
      "name": "aggregated_by",
      "in": "query",
      "description": "How to group the statistics. Must be either \"day\", \"week\", or \"month\".",
      "required": false,
      "type": "string",
      "enum": ["day", "week", "month"]
    },
    "trait:statsAdvancedQueryStringsLimitOffset:start_date": {
      "name": "start_date",
      "in": "query",
      "description": "The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.",
      "required": true,
      "type": "string"
    },
    "trait:statsAdvancedQueryStringsLimitOffset:end_date": {
      "name": "end_date",
      "in": "query",
      "description": "The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.",
      "required": false,
      "type": "string"
    }
  },
  "definitions": {
    "Foo": {
      "type": "object",
      "properties": {
        "code": { "type": "integer", "format": "int32" },
        "type": { "type": "string" },
        "message": { "type": "string" }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": { "type": "integer", "format": "int32" },
        "type": { "type": "string" },
        "message": { "type": "string" }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" }
      },
      "xml": { "name": "Category" }
    },
    "Pet": {
      "type": "object",
      "required": ["name", "photoUrls"],
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "category": { "$ref": "#/definitions/Category" },
        "name": { "type": "string", "example": "doggie" },
        "field": {
          "type": "null",
          "description": "This empty field is returned instead of the list of scopes if the user making the call doesn't have the authorization required."
        },
        "photoUrls": {
          "type": "array",
          "xml": { "wrapped": true },
          "items": { "type": "string", "xml": { "name": "photoUrl" } }
        },
        "tags": {
          "type": "array",
          "xml": { "wrapped": true },
          "items": { "xml": { "name": "tag" }, "$ref": "#/definitions/Tag" }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": ["available", "pending", "sold"]
        }
      },
      "xml": { "name": "Pet" }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" }
      },
      "xml": { "name": "Tag" }
    },
    "Order": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "petId": { "type": "integer", "format": "int64" },
        "quantity": { "type": "integer", "format": "int32" },
        "shipDate": { "type": "string", "format": "date-time" },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": ["placed", "approved", "delivered"]
        },
        "complete": { "type": "boolean" }
      },
      "xml": { "name": "Order" }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "username": { "type": "string" },
        "firstName": { "type": "string" },
        "lastName": { "type": "string" },
        "email": { "type": "string" },
        "password": { "type": "string" },
        "phone": { "type": "string" },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": { "name": "User" }
    },
    "snake_object": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "username": { "type": "string" },
        "context": {}
      },
      "xml": { "name": "User" }
    },
    "oAuth2Client": {
      "type": "object",
      "title": "Client represents an OAuth 2.0 Client.",
      "properties": {
        "client_id": {
          "description": "ID  is the id for this client.",
          "type": "string"
        },
        "client_name": {
          "description": "Name is the human-readable string name of the client to be presented to the\nend-user during authorization.",
          "type": "string"
        },
        "client_secret": {
          "description": "Secret is the client's secret. The secret will be included in the create request as cleartext, and then\nnever again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users\nthat they need to write the secret down as it will not be made available again.",
          "type": "string"
        },
        "client_secret_expires_at": {
          "description": "SecretExpiresAt is an integer holding the time at which the client\nsecret will expire or 0 if it will not expire. The time is\nrepresented as the number of seconds from 1970-01-01T00:00:00Z as\nmeasured in UTC until the date/time of expiration.\n\nThis feature is currently not supported and it's value will always\nbe set to 0.",
          "type": "integer",
          "format": "int64"
        },
        "client_uri": {
          "description": "ClientURI is an URL string of a web page providing information about the client.\nIf present, the server SHOULD display this URL to the end-user in\na clickable fashion.",
          "type": "string"
        }
      }
    },
    "consentRequestSession": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "object",
          "additionalProperties": true
        },
        "id_token": {
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "PreviousConsentSession": {
      "type": "object",
      "properties": {
        "remember": {
          "type": "boolean"
        },
        "remember_for": {
          "type": "integer",
          "format": "int64"
        },
        "session": {
          "$ref": "#/definitions/consentRequestSession"
        }
      }
    },
    "DefaultError": {},
    "contactdb_recipient": {
      "title": "ContactDB: Recipient",
      "type": "object",
      "properties": {
        "recipients": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "custom_fields": {
                "type": "array",
                "description": "The custom fields assigned to this recipient and their values.",
                "items": {
                  "$ref": "#/definitions/contactdb_custom_field_with_id_value"
                }
              },
              "first_name": {
                "type": ["string", "null"],
                "description": "The first name of this recipient. This is a default custom field that SendGrid provides."
              }
            },
            "required": ["email"]
          }
        }
      }
    },
    "contactdb_custom_field_with_id_value": {
      "title": "ContactDB Custom field schema.",
      "allOf": [
        {
          "$ref": "#/definitions/contactdb_custom_field_with_id"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": ["string", "null"],
              "description": "The value of this recipient's custom field"
            }
          }
        }
      ]
    },
    "contactdb_custom_field_with_id": {
      "title": "ContactDB Custom field schema with ID.",
      "allOf": [
        {
          "$ref": "#/definitions/contactdb_custom_field"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "description": "The ID of the custom field."
            }
          }
        }
      ]
    },
    "contactdb_custom_field": {
      "title": "ContactDB Custom field schema.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field"
        },
        "type": {
          "type": "string",
          "description": "The type of the field.",
          "enum": ["date", "text", "number"]
        }
      }
    },
    "advanced_stats_clicks": {
      "title": "Stats: Advanced Stats with Clicks",
      "type": "object",
      "description": "The individual events and their stats.",
      "properties": {
        "clicks": {
          "type": "integer",
          "description": "The number of links that were clicked in your emails."
        },
        "unique_clicks": {
          "type": "integer",
          "description": "The number of unique recipients who clicked links in your emails."
        }
      }
    },
    "advanced_stats_clicks_opens": {
      "title": "Stats: Advanced Stats with Clicks and Opens",
      "description": "The individual events and their stats.",
      "allOf": [
        {
          "$ref": "#/definitions/advanced_stats_clicks"
        },
        {
          "$ref": "#/definitions/advanced_stats_opens"
        }
      ]
    },
    "advanced_stats_opens": {
      "title": "Stats: Advanced Stats with Opens",
      "type": "object",
      "description": "The individual events and their stats.",
      "properties": {
        "opens": {
          "type": "integer",
          "description": "The total number of times your emails were opened by recipients."
        },
        "unique_opens": {
          "type": "integer",
          "description": "The number of unique recipients who opened your emails."
        }
      }
    },
    "domain_authentication:domain_spf": {
      "title": "Domain Authentication",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the authenticated domain."
        },
        "domain": {
          "type": "string",
          "description": "The domain authenticated."
        },
        "subdomain": {
          "type": "string",
          "description": "The subdomain that was used to create this authenticated domain."
        },
        "username": {
          "type": "string",
          "description": "The username of the account that this authenticated domain is associated with."
        },
        "user_id": {
          "type": "integer",
          "description": "The user_id of the account that this authenticated domain is associated with."
        },
        "ips": {
          "type": "array",
          "description": "The IP addresses that are included in the SPF record for this authenticated domain.",
          "items": {}
        },
        "custom_spf": {
          "type": "boolean",
          "description": "Indicates if this authenticated domain uses custom SPF."
        },
        "default": {
          "type": "boolean",
          "description": "Indicates if this is the default domain."
        },
        "legacy": {
          "type": "boolean",
          "description": "Indicates if this authenticated domain was created using the legacy whitelabel tool. If it is a legacy whitelabel, it will still function, but you'll need to create a new authenticated domain if you need to update it."
        },
        "automatic_security": {
          "type": "boolean",
          "description": "Indicates if this authenticated domain uses automated security."
        },
        "valid": {
          "type": "boolean",
          "description": "Indicates if this is a valid authenticated domain ."
        },
        "dns": {
          "type": "object",
          "description": "The DNS records for this authenticated domain.",
          "required": ["mail_server", "subdomain_spf", "domain_spf", "dkim"],
          "properties": {
            "mail_server": {
              "type": "object",
              "description": "Designates which mail server is responsible for accepting messages from a domain.",
              "required": ["host", "type", "data", "valid"],
              "properties": {
                "host": {
                  "type": "string",
                  "description": "The domain sending the messages."
                },
                "type": {
                  "type": "string",
                  "description": "They type of DNS record."
                },
                "data": {
                  "type": "string",
                  "description": "The mail server responsible for accepting messages from the sending domain."
                },
                "valid": {
                  "type": "boolean",
                  "description": "Indicates if this is a valid DNS record."
                }
              }
            },
            "subdomain_spf": {
              "type": "object",
              "description": "The SPF record for the subdomain used to create this authenticated domain.",
              "required": ["host", "type", "data", "valid"],
              "properties": {
                "host": {
                  "type": "string",
                  "description": "The domain that this SPF record will be used to authenticate."
                },
                "type": {
                  "type": "string",
                  "description": "The type of data in the SPF record."
                },
                "data": {
                  "type": "string",
                  "description": "The SPF record."
                },
                "valid": {
                  "type": "boolean",
                  "description": "Indicates if this is a valid SPF record."
                }
              }
            },
            "domain_spf": {
              "type": "object",
              "description": "The SPF record for the root domain.",
              "required": ["host", "type", "data", "valid"],
              "properties": {
                "host": {
                  "type": "string",
                  "description": "The root domain that this SPF record will be used to authenticate."
                },
                "type": {
                  "type": "string",
                  "description": "The type of data in the SPF record."
                },
                "data": {
                  "type": "string",
                  "description": "The SPF record."
                },
                "valid": {
                  "type": "boolean",
                  "description": "Indicates if the SPF record is valid."
                }
              }
            },
            "dkim": {
              "type": "object",
              "description": "The DKIM record for messages sent using this authenticated domain.",
              "required": ["host", "type", "data", "valid"],
              "properties": {
                "host": {
                  "type": "string",
                  "description": "The DNS labels for the DKIM signature."
                },
                "type": {
                  "type": "string",
                  "description": "The type of data in the DKIM record."
                },
                "data": {
                  "type": "string",
                  "description": "The DKIM record."
                },
                "valid": {
                  "type": "boolean",
                  "description": "Indicates if the DKIM record is valid."
                }
              }
            }
          }
        }
      },
      "required": [
        "id",
        "domain",
        "username",
        "user_id",
        "ips",
        "custom_spf",
        "default",
        "legacy",
        "automatic_security",
        "valid",
        "dns"
      ]
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
