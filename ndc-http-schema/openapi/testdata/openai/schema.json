{
  "collections": [],
  "functions": [],
  "object_types": {
    "ChatCompletionFunctionsInput": {
      "fields": {
        "description": {
          "description": "A description of what the function does, used by the model to choose when and how to call the function.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "name": {
          "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "parameters": {
          "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.   Omitting `parameters` defines a function with an empty parameter list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FunctionParameters",
              "type": "named"
            }
          }
        }
      }
    },
    "ChatCompletionMessageToolCall": {
      "fields": {
        "function": {
          "description": "The function that the model called.",
          "type": {
            "name": "ChatCompletionMessageToolCallFunction",
            "type": "named"
          }
        },
        "id": {
          "description": "The ID of the tool call.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "type": {
          "description": "The type of the tool. Currently, only `function` is supported.",
          "type": {
            "name": "ChatCompletionMessageToolCallType",
            "type": "named"
          }
        }
      }
    },
    "ChatCompletionMessageToolCallFunction": {
      "description": "The function that the model called.",
      "fields": {
        "arguments": {
          "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "name": {
          "description": "The name of the function to call.",
          "type": {
            "name": "String",
            "type": "named"
          }
        }
      }
    },
    "ChatCompletionMessageToolCallFunctionInput": {
      "description": "The function that the model called.",
      "fields": {
        "arguments": {
          "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "name": {
          "description": "The name of the function to call.",
          "type": {
            "name": "String",
            "type": "named"
          }
        }
      }
    },
    "ChatCompletionMessageToolCallInput": {
      "fields": {
        "function": {
          "description": "The function that the model called.",
          "type": {
            "name": "ChatCompletionMessageToolCallFunctionInput",
            "type": "named"
          }
        },
        "id": {
          "description": "The ID of the tool call.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "type": {
          "description": "The type of the tool. Currently, only `function` is supported.",
          "type": {
            "name": "ChatCompletionMessageToolCallType",
            "type": "named"
          }
        }
      }
    },
    "ChatCompletionRequestAssistantMessageFunctionCallInput": {
      "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
      "fields": {
        "arguments": {
          "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "name": {
          "description": "The name of the function to call.",
          "type": {
            "name": "String",
            "type": "named"
          }
        }
      }
    },
    "ChatCompletionRequestMessageInput": {
      "fields": {
        "content": {
          "description": "The contents of the system message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          }
        },
        "function_call": {
          "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "type": "nullable",
              "underlying_type": {
                "name": "ChatCompletionRequestAssistantMessageFunctionCallInput",
                "type": "named"
              }
            }
          }
        },
        "name": {
          "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "role": {
          "description": "The role of the messages author, in this case `system`.",
          "type": {
            "name": "ChatCompletionRequestMessageRoleEnum",
            "type": "named"
          }
        },
        "tool_call_id": {
          "description": "Tool call that this message is responding to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "tool_calls": {
          "description": "The tool calls generated by the model, such as function calls.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ChatCompletionMessageToolCallInput",
                "type": "named"
              },
              "type": "array"
            }
          }
        }
      }
    },
    "ChatCompletionResponseMessage": {
      "description": "A chat completion message generated by the model.",
      "fields": {
        "content": {
          "description": "The contents of the message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "function_call": {
          "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChatCompletionResponseMessageFunctionCall",
              "type": "named"
            }
          }
        },
        "role": {
          "description": "The role of the author of this message.",
          "type": {
            "name": "ChatCompletionResponseMessageRole",
            "type": "named"
          }
        },
        "tool_calls": {
          "description": "The tool calls generated by the model, such as function calls.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ChatCompletionMessageToolCall",
                "type": "named"
              },
              "type": "array"
            }
          }
        }
      }
    },
    "ChatCompletionResponseMessageFunctionCall": {
      "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
      "fields": {
        "arguments": {
          "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "name": {
          "description": "The name of the function to call.",
          "type": {
            "name": "String",
            "type": "named"
          }
        }
      }
    },
    "ChatCompletionStreamOptionsInput": {
      "description": "Options for streaming response. Only set this when you set `stream: true`.",
      "fields": {
        "include_usage": {
          "description": "If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        }
      }
    },
    "ChatCompletionTokenLogprob": {
      "fields": {
        "bytes": {
          "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "logprob": {
          "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
          "type": {
            "name": "Float64",
            "type": "named"
          }
        },
        "token": {
          "description": "The token.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "top_logprobs": {
          "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.",
          "type": {
            "element_type": {
              "name": "ChatCompletionTokenLogprobTopLogprobs",
              "type": "named"
            },
            "type": "array"
          }
        }
      }
    },
    "ChatCompletionTokenLogprobTopLogprobs": {
      "fields": {
        "bytes": {
          "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "logprob": {
          "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
          "type": {
            "name": "Float64",
            "type": "named"
          }
        },
        "token": {
          "description": "The token.",
          "type": {
            "name": "String",
            "type": "named"
          }
        }
      }
    },
    "ChatCompletionToolInput": {
      "fields": {
        "function": {
          "type": {
            "name": "FunctionObjectInput",
            "type": "named"
          }
        },
        "type": {
          "description": "The type of the tool. Currently, only `function` is supported.",
          "type": {
            "name": "ChatCompletionToolType",
            "type": "named"
          }
        }
      }
    },
    "CreateChatCompletionRequestInput": {
      "fields": {
        "frequency_penalty": {
          "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          }
        },
        "function_call": {
          "description": "Deprecated in favor of `tool_choice`.  Controls which (if any) function is called by the model. `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.  `none` is the default when no functions are present. `auto` is the default if functions are present.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          }
        },
        "functions": {
          "description": "Deprecated in favor of `tools`.  A list of functions the model may generate JSON inputs for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ChatCompletionFunctionsInput",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "logit_bias": {
          "description": "Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          }
        },
        "logprobs": {
          "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "max_tokens": {
          "description": "The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.  The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          }
        },
        "messages": {
          "description": "A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).",
          "type": {
            "element_type": {
              "name": "ChatCompletionRequestMessageInput",
              "type": "named"
            },
            "type": "array"
          }
        },
        "model": {
          "description": "ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "n": {
          "description": "How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          }
        },
        "parallel_tool_calls": {
          "description": "Whether to enable [parallel function calling](/docs/guides/function-calling/parallel-function-calling) during tool use.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "presence_penalty": {
          "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          }
        },
        "response_format": {
          "description": "An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateChatCompletionRequestResponseFormatInput",
              "type": "named"
            }
          }
        },
        "seed": {
          "description": "This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          }
        },
        "service_tier": {
          "description": "Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:   - If set to 'auto', the system will utilize scale tier credits until they are exhausted.   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.   - When not set, the default behavior is 'auto'.    When this parameter is set, the response body will include the `service_tier` utilized.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateChatCompletionRequestServiceTier",
              "type": "named"
            }
          }
        },
        "stop": {
          "description": "Up to 4 sequences where the API will stop generating further tokens.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          }
        },
        "stream": {
          "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "stream_options": {
          "description": "Options for streaming response. Only set this when you set `stream: true`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "type": "nullable",
              "underlying_type": {
                "name": "ChatCompletionStreamOptionsInput",
                "type": "named"
              }
            }
          }
        },
        "temperature": {
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          }
        },
        "tool_choice": {
          "description": "Controls which (if any) tool is called by the model. `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools. Specifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.  `none` is the default when no tools are present. `auto` is the default if tools are present.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChatCompletionToolChoiceOption",
              "type": "named"
            }
          }
        },
        "tools": {
          "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ChatCompletionToolInput",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "top_logprobs": {
          "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          }
        },
        "top_p": {
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          }
        },
        "user": {
          "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      }
    },
    "CreateChatCompletionRequestResponseFormatInput": {
      "description": "An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.",
      "fields": {
        "type": {
          "description": "Must be one of `text` or `json_object`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateChatCompletionRequestResponseFormatType",
              "type": "named"
            }
          }
        }
      }
    },
    "CreateChatCompletionResponse": {
      "description": "Represents a chat completion response returned by model, based on the provided input.",
      "fields": {
        "choices": {
          "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1.",
          "type": {
            "element_type": {
              "name": "CreateChatCompletionResponseChoices",
              "type": "named"
            },
            "type": "array"
          }
        },
        "created": {
          "description": "The Unix timestamp (in seconds) of when the chat completion was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          }
        },
        "id": {
          "description": "A unique identifier for the chat completion.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "model": {
          "description": "The model used for the chat completion.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "object": {
          "description": "The object type, which is always `chat.completion`.",
          "type": {
            "name": "CreateChatCompletionResponseObject",
            "type": "named"
          }
        },
        "service_tier": {
          "description": "The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateChatCompletionResponseServiceTier",
              "type": "named"
            }
          }
        },
        "system_fingerprint": {
          "description": "This fingerprint represents the backend configuration that the model runs with.  Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      }
    },
    "CreateChatCompletionResponseChoices": {
      "fields": {
        "finish_reason": {
          "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.",
          "type": {
            "name": "CreateChatCompletionResponseChoicesFinishReason",
            "type": "named"
          }
        },
        "index": {
          "description": "The index of the choice in the list of choices.",
          "type": {
            "name": "Int32",
            "type": "named"
          }
        },
        "logprobs": {
          "description": "Log probability information for the choice.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "type": "nullable",
              "underlying_type": {
                "name": "CreateChatCompletionResponseChoicesLogprobs",
                "type": "named"
              }
            }
          }
        },
        "message": {
          "description": "A chat completion message generated by the model.",
          "type": {
            "name": "ChatCompletionResponseMessage",
            "type": "named"
          }
        }
      }
    },
    "CreateChatCompletionResponseChoicesLogprobs": {
      "description": "Log probability information for the choice.",
      "fields": {
        "content": {
          "description": "A list of message content tokens with log probability information.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ChatCompletionTokenLogprob",
                "type": "named"
              },
              "type": "array"
            }
          }
        }
      }
    },
    "CreateModelRequestInput": {
      "fields": {
        "model": {
          "description": "The name of the model to create",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      }
    },
    "CreateThreadAndRunRequestInput": {
      "fields": {
        "assistant_id": {
          "description": "The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "thread": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadRequestInput",
              "type": "named"
            }
          }
        }
      }
    },
    "CreateThreadRequestInput": {
      "fields": {
        "tool_resources": {
          "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "type": "nullable",
              "underlying_type": {
                "name": "CreateThreadRequestToolResourcesInput",
                "type": "named"
              }
            }
          }
        }
      }
    },
    "CreateThreadRequestToolResourcesCodeInterpreterInput": {
      "fields": {
        "file_ids": {
          "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        }
      }
    },
    "CreateThreadRequestToolResourcesFileSearchInput": {
      "fields": {
        "vector_store_ids": {
          "description": "The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "vector_stores": {
          "description": "A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CreateThreadRequestToolResourcesFileSearchVectorStoresInput",
                "type": "named"
              },
              "type": "array"
            }
          }
        }
      }
    },
    "CreateThreadRequestToolResourcesFileSearchVectorStoresChunkingStrategy1StaticInput": {
      "fields": {
        "chunk_overlap_tokens": {
          "description": "The number of tokens that overlap between chunks. The default value is `400`.  Note that the overlap must not exceed half of `max_chunk_size_tokens`.",
          "type": {
            "name": "Int32",
            "type": "named"
          }
        },
        "max_chunk_size_tokens": {
          "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.",
          "type": {
            "name": "Int32",
            "type": "named"
          }
        }
      }
    },
    "CreateThreadRequestToolResourcesFileSearchVectorStoresChunkingStrategyInput": {
      "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
      "fields": {
        "static": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadRequestToolResourcesFileSearchVectorStoresChunkingStrategy1StaticInput",
              "type": "named"
            }
          }
        },
        "type": {
          "description": "Always `auto`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadRequestToolResourcesFileSearchVectorStoresChunkingStrategyTypeEnum",
              "type": "named"
            }
          }
        }
      }
    },
    "CreateThreadRequestToolResourcesFileSearchVectorStoresInput": {
      "fields": {
        "chunking_strategy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadRequestToolResourcesFileSearchVectorStoresChunkingStrategyInput",
              "type": "named"
            }
          }
        },
        "file_ids": {
          "description": "A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          }
        }
      }
    },
    "CreateThreadRequestToolResourcesInput": {
      "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
      "fields": {
        "code_interpreter": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadRequestToolResourcesCodeInterpreterInput",
              "type": "named"
            }
          }
        },
        "file_search": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadRequestToolResourcesFileSearchInput",
              "type": "named"
            }
          }
        }
      }
    },
    "FunctionObjectInput": {
      "fields": {
        "description": {
          "description": "A description of what the function does, used by the model to choose when and how to call the function.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "name": {
          "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "parameters": {
          "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.   Omitting `parameters` defines a function with an empty parameter list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FunctionParameters",
              "type": "named"
            }
          }
        }
      }
    },
    "ProgressResponse": {
      "fields": {
        "completed": {
          "description": "The completed size of the task",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          }
        },
        "digest": {
          "description": "The SHA256 digest of the blob",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "status": {
          "description": "The status of the request",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "total": {
          "description": "The total size of the task",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          }
        }
      }
    },
    "RunObject": {
      "description": "Represents an execution run on a [thread](/docs/api-reference/threads).",
      "fields": {
        "assistant_id": {
          "description": "The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the run was created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          }
        },
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "object": {
          "description": "The object type, which is always `thread.run`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunObjectObject",
              "type": "named"
            }
          }
        },
        "thread_id": {
          "description": "The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      }
    }
  },
  "procedures": [
    {
      "arguments": {
        "body": {
          "description": "Request body of POST /api/create",
          "type": {
            "name": "CreateModelRequestInput",
            "type": "named"
          }
        }
      },
      "description": "POST /api/create",
      "name": "_GET_createModel",
      "result_type": {
        "element_type": {
          "name": "ProgressResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    {
      "arguments": {
        "body": {
          "description": "Request body of POST /chat/completions",
          "type": {
            "name": "CreateChatCompletionRequestInput",
            "type": "named"
          }
        }
      },
      "description": "Creates a model response for the given chat conversation.",
      "name": "createChatCompletion",
      "result_type": {
        "name": "CreateChatCompletionResponse",
        "type": "named"
      }
    },
    {
      "arguments": {
        "body": {
          "description": "Request body of POST /threads/runs",
          "type": {
            "name": "CreateThreadAndRunRequestInput",
            "type": "named"
          }
        }
      },
      "description": "Create a thread and run it in one request.",
      "name": "createThreadAndRun",
      "result_type": {
        "name": "RunObject",
        "type": "named"
      }
    }
  ],
  "scalar_types": {
    "Boolean": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "boolean"
      }
    },
    "ChatCompletionMessageToolCallType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "function"
        ],
        "type": "enum"
      }
    },
    "ChatCompletionRequestMessageRoleEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "assistant",
          "function",
          "system",
          "tool",
          "user"
        ],
        "type": "enum"
      }
    },
    "ChatCompletionResponseMessageRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "assistant"
        ],
        "type": "enum"
      }
    },
    "ChatCompletionToolChoiceOption": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "ChatCompletionToolType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "function"
        ],
        "type": "enum"
      }
    },
    "CreateChatCompletionRequestResponseFormatType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text",
          "json_object"
        ],
        "type": "enum"
      }
    },
    "CreateChatCompletionRequestServiceTier": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "auto",
          "default"
        ],
        "type": "enum"
      }
    },
    "CreateChatCompletionResponseChoicesFinishReason": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "stop",
          "length",
          "tool_calls",
          "content_filter",
          "function_call"
        ],
        "type": "enum"
      }
    },
    "CreateChatCompletionResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "chat.completion"
        ],
        "type": "enum"
      }
    },
    "CreateChatCompletionResponseServiceTier": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "scale",
          "default"
        ],
        "type": "enum"
      }
    },
    "CreateThreadRequestToolResourcesFileSearchVectorStoresChunkingStrategyTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "auto",
          "static"
        ],
        "type": "enum"
      }
    },
    "Float64": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "float64"
      }
    },
    "FunctionParameters": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "Int32": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "int32"
      }
    },
    "JSON": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "RunObjectObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "thread.run"
        ],
        "type": "enum"
      }
    },
    "String": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    }
  }
}
