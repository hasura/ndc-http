openapi: 3.0.0
servers:
  - url: https://app.asana.com/api/1.0
    description: Main endpoint.
security:
  - personalAccessToken: []
  - oauth2: []
components:
  securitySchemes:
    personalAccessToken:
      type: http
      description: >-
        A personal access token allows access to the api for the user who
        created it. This should be kept a secret and be treated like a
        password.
      scheme: bearer
    oauth2:
      type: oauth2
      description: >-
        We require that applications designed to access the Asana API on behalf
        of multiple users implement OAuth 2.0.

        Asana supports the Authorization Code Grant flow.
      flows:
        authorizationCode:
          authorizationUrl: https://app.asana.com/-/oauth_authorize
          tokenUrl: https://app.asana.com/-/oauth_token
          refreshUrl: https://app.asana.com/-/oauth_token
          scopes:
            default: ""

  parameters:
    allocation_path_gid:
      name: allocation_gid
      in: path
      description: >-
        Globally unique identifier for the allocation.
      required: true
      schema:
        type: string
      example: "77688"
      x-env-variable: allocation
    pretty:
      name: opt_pretty
      in: query
      description: >-
        Provides “pretty” output.

        Provides the response in a “pretty” format. In the case of JSON this
        means doing proper line breaking and indentation to make it readable.
        This will take extra time and increase the response size so it is
        advisable only to use this during debugging.
      required: false
      allowEmptyValue: true
      schema:
        type: boolean
      style: form
      example: true
  responses:
    BadRequest:
      description: >-
        This usually occurs because of a missing or malformed parameter. Check
        the documentation and the syntax of your request and try again.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Unauthorized:
      description: >-
        A valid authentication token was not provided with the request, so the
        API could not associate a user with the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    PaymentRequired:
      description: >-
        The request was valid, but the queried object or object mutation
        specified in the request is above your current premium level.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Forbidden:
      description: >-
        The authentication and request syntax was valid but the server is
        refusing to complete the request. This can happen if you try to read or
        write to objects or properties that the user does not have access to.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFound:
      description: >-
        Either the request method and path supplied do not specify a known
        action in the API, or the object specified by the request does not
        exist.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalServerError:
      description: >-
        There was a problem on Asana’s end.
        In the event of a server error the response body should contain an error
        phrase. These phrases can be used by Asana support to quickly look up the
        incident that caused the server error.
        Some errors are due to server load, and will not supply an error phrase.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  schemas:
    AllocationBase:
      description: >-
        A generic Asana Resource, containing a globally unique identifier.
      type: object
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
          x-insert-after: false
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: allocation
          x-insert-after: gid
        start_date:
          type: string
          format: date
          description: >-
            The localized day on which the allocation starts.
          example: "2024-02-28"
        end_date:
          type: string
          format: date
          description: >-
            The localized day on which the allocation ends.
          example: "2024-02-28"
        effort:
          type: object
          nullable: true
          description: >-
            The amount of time associated with the allocation, represented as a percentage
            or number of hours
          properties:
            type:
              type: string
              description: >-
                The units used for tracking effort on an allocation, either "hours"
                or "percent".
              enum:
                - hours
                - percent
            value:
              type: number
              description: >-
                The numeric effort value on the allocation.
              example: 50
    AllocationResponse:
      allOf:
        - $ref: "#/components/schemas/AllocationBase"
        - type: object
          properties:
            assignee:
              allOf:
                - $ref: "#/components/schemas/UserCompact"
                - type: object
                  description: >-
                    The user or placeholder assigned to the allocation.
                  properties:
                    name:
                      type: string
                      description: >-
                        The name of allocation resource.
                      example: Greg Sanchez
    ErrorResponse:
      description: |-
        Sadly, sometimes requests to the API are not successful. Failures can
        occur for a wide range of reasons. In all cases, the API should return
        an HTTP Status Code that indicates the nature of the failure,
        with a response body in JSON format containing additional information.


        In the event of a server error the response body will contain an error
        phrase. These phrases are automatically generated using the
        [node-asana-phrase
        library](https://github.com/Asana/node-asana-phrase) and can be used by
        Asana support to quickly look up the incident that caused the server
        error.
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/Error"
    Error:
      type: object
      properties:
        message:
          type: string
          readOnly: true
          description: >-
            Message providing more detail about the error that occurred, if
            available.
          example: "project: Missing input"
        help:
          type: string
          readOnly: true
          description: >-
            Additional information directing developers to resources on how
            to address and fix the problem, if available.
          example: >-
            For more information on API status codes and how to handle them,
            read the docs on errors:
            https://asana.github.io/developer-docs/#errors'
        phrase:
          type: string
          readOnly: true
          description: >-
            *500 errors only*. A unique error phrase which can be used
            when contacting developer support to help identify the exact
            occurrence of the problem in Asana’s logs.
          example: 6 sad squid snuggle softly
    UserCompact:
      description: >-
        A *user* object represents an account in Asana that can be given
        access to various workspaces, projects, and tasks.
      type: object
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
          x-insert-after: false
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: user
          x-insert-after: gid
        name:
          type: string
          description: >-
            *Read-only except when same user as requester*. The user’s name.
          example: Greg Sanchez
paths:
  /allocations/{allocation_gid}:
    parameters:
      - $ref: "#/components/parameters/allocation_path_gid"
      - $ref: "#/components/parameters/pretty"
    get:
      summary: Get an allocation
      description: Returns the complete allocation record for a single allocation.
      tags:
        - Allocations
      operationId: getAllocation
      parameters:
        - name: opt_fields
          in: query
          description:
            This endpoint returns a resource which excludes some properties
            by default. To include those optional properties, set this query parameter
            to a comma-separated list of the properties you wish to include.
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - assignee
                - assignee.name
                - created_by
                - created_by.name
                - effort
                - effort.type
                - effort.value
                - end_date
                - parent
                - parent.name
                - resource_subtype
                - start_date
          style: form
          explode: false
      responses:
        200:
          description: Successfully retrieved the record for a single allocation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/AllocationResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        402:
          $ref: "#/components/responses/PaymentRequired"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
